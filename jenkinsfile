pipeline{
    agent any
    environment{
        SONNARQUBE_SEVER = 'Sonar Local'
    }
  
    stages{
        stage('Checkout'){
            steps{
                git branch: 'master', url: 'https://github.com/ALBCAB03/threepoints_devops_webserver.git'
            }
        }
        stage('Pruebas de SAST'){
            parallel{
                stage('Ejecutar SAST'){
                    steps{
                        echo 'Iniciando pruebas de SAST'
                    }
                }
                stage('Analizar Codigo'){
                    steps{
                        script{
                            def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
                            withSonarQubeEnv('Sonar Local'){
                                sh """${scannerHome}/bin/sonar-scanner
                                    -Dsonar.projectKey=threepoints_devops_webserver
                                    -Dsonar.sources=.
                                    -Dsonar.host.url=http://localhost:9000
                                    -Dsonar.login={Jenkins Token}"""
                            }
                        }
                    }

                }   
            }
        }
        stage('SonarQube Quality Gate'){
            steps{
                timeout(time: 5, unit: TimeUnit.MINUTES){
                    script{
                        def qg = waitForQualityGate()
                        if(qg.status != 'OK'){
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage('Configurar archivo'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'Credentials_Threepoints', usernameVariable: 'admin', passwordVariable: 'password')]) {
                    sh '''
                        echo "[credentials]" > credentials.ini
                        echo "user=${admin}" >> credentials.ini
                        echo "password=${password}" >> credentials.ini
                    '''
                }
                archiveArtifacts artifacts: 'credentials.ini', onlyIfSuccessful: true, fingerprint: true
            }
        }
        stage('Build'){
            steps{
                sh 'docker build -t devops_ws .'
            }
        }
    }
}