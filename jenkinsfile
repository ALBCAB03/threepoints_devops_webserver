import java.util.concurrent.TimeUnit


pipeline{
    agent any
    environment{
        SONNARQUBE_SEVER = 'Sonar Local'
    }
  
    stages{
        stage('Checkout'){
            steps{
                git branch: 'master', url: 'https://github.com/ALBCAB03/threepoints_devops_webserver.git'
            }
        }
        stage('Pruebas de SAST'){
            parallel{
                stage('Ejecutar SAST'){
                    steps{
                        echo 'Iniciando pruebas de SAST'
                    }
                }
                stage('Analizar Codigo'){
                    steps{
                        script{
                            def scannerHome = tool name: 'SonarScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation';
                            withSonarQubeEnv('Sonar Local'){
                                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONNARQUBE_TOKEN')]){
                                    sh """${scannerHome}/bin/sonar-scanner \
                                        -Dsonar.projectKey=devops_ws \
                                        -Dsonar.sources=src \
                                        -Dsonar.host.url=http://localhost:9000 \
                                        -Dsonar.login=${SONNARQUBE_TOKEN}"""
                                }
                            }
                        }
                    }

                }   
            }
        }
        stage('Configurar archivo'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'Credentials_Threepoints', usernameVariable: 'admin', passwordVariable: 'password')]) {
                    sh '''
                        echo "[credentials]" > credentials.ini
                        echo "user=${admin}" >> credentials.ini
                        echo "password=${password}" >> credentials.ini
                    '''
                }
                archiveArtifacts artifacts: 'credentials.ini', onlyIfSuccessful: true, fingerprint: true
            }
        }
        stage('Build'){
            steps{
                sh 'docker build -t devops_ws .'
            }
        }
        stage('Despliegue servidor'){
            steps{
                sh ''' 
                echo "deteniendo contenedores"
                docker stop devops_ws || true
                docker rm devops_ws || true

                echo "levantando contenedor"
                'docker run -d -p 8080:8080 --name devops_ws devops_ws'
                '''
            }
        }
    }
}